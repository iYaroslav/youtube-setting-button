{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["Menu","onChange","useState","pages","useMemo","_settings","deepClone","Array","arr","i","obj","cloned","fillPage","_items","items","str","key","title","value","checked","parent","page","s","onClick","setCurrent","setting","allowCustomValue","onOtherValueSelected","multiselectable","onBackClick","getMeta","parentKey","React","className","styles","current","header","menu","item","ref","useRef","defaultOpen","closeOnOutsideClick","closeOnEsc","portal","hd","isOpen","style","openPortal","height","version","viewBox","width","d","container","settings","App","entries","prompt","config","setConfig","position","top","left","marginLeft","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afe8676b.chunk.js","sourcesContent":["import React, {\n  useRef,\n  useState,\n  useMemo,\n  CSSProperties,\n  ReactNode,\n  Key\n} from 'react'\nimport { PortalWithState } from 'react-portal'\nimport styles from './styles.module.css'\n\nfunction deepClone<T>(obj: T): T {\n  if (Array.isArray(obj)) {\n    const arr = []\n    for (let i = 0; i < obj.length; i++) {\n      arr[i] = deepClone(obj[i])\n    }\n\n    // @ts-ignore\n    return arr\n  }\n\n  if (typeof obj === 'object') {\n    const cloned = {}\n    for (const key in obj) {\n      // @ts-ignore\n      cloned[key] = deepClone(obj[key])\n    }\n\n    // @ts-ignore\n    return cloned\n  }\n\n  return obj\n}\n\nexport interface Item {\n  key: Key\n  title: ReactNode\n  value?: boolean | ReactNode\n  checked?: boolean\n}\n\nexport interface Setting extends Item {\n  entries?: string[] | Setting[]\n  allowCustomValue?: boolean\n  onOtherValueSelected?: () => ReactNode\n}\n\ninterface PageItem extends Item {\n  onClick: () => void\n}\n\ninterface Page {\n  key: Key\n  title?: ReactNode\n  allowCustomValue?: boolean\n  onOtherValueSelected?: () => ReactNode\n  multiselectable?: boolean\n  items: PageItem[]\n  onBackClick?: () => void\n}\n\nexport interface MenuProps {\n  settings: Setting[]\n  // onOtherSelect?: () => ReactNode\n  title?: ReactNode\n  // multiselectable: boolean\n  // allowCustomValue: boolean\n  onChange?: (settings: Setting[]) => void\n}\n\nexport interface Props extends MenuProps {\n  hd?: boolean\n  active?: boolean\n  className?: string\n  style?: CSSProperties\n  settings: Setting[]\n  onChange?: (settings: Setting[]) => void\n}\n\nconst Menu = ({ settings, onChange = () => {} }: MenuProps) => {\n  const [current, setCurrent] = useState<Key>('main')\n\n  const pages = useMemo(() => {\n    const _settings = deepClone(settings)\n\n    const pages: Page[] = []\n\n    const boolToReactNode = (value: boolean) => {\n      // TODO use switch!\n      return value ? 'Yep' : 'Nope'\n    }\n\n    const getMeta = (setting: Setting | undefined, key?: Key) => {\n      if (!setting) return {}\n\n      return {\n        title: setting.title,\n        allowCustomValue: setting.allowCustomValue,\n        onOtherValueSelected: setting.onOtherValueSelected,\n        multiselectable:\n          setting.entries &&\n          setting.entries.length > 0 &&\n          typeof setting.entries[0] === 'string',\n        onBackClick: () => key && setCurrent(key)\n      }\n    }\n\n    const fillPage = (\n      items: string[] | Setting[],\n      key: Key,\n      parent?: Setting,\n      parentKey?: Key\n    ) => {\n      let _items: Setting[]\n      if (items.length && typeof items[0] === 'string') {\n        // @ts-ignore\n        _items = items.map((str: string) => ({\n          key: str,\n          title: str,\n          value: undefined,\n          checked: str === parent?.value\n        }))\n      } else {\n        _items = items as Setting[]\n      }\n\n      const page: Partial<Page> = {\n        items: _items.map((s) => {\n          if (s.entries) {\n            fillPage(s.entries, s.key, s, key)\n          }\n\n          return {\n            key: s.key,\n            title: s.title,\n            checked: s.checked,\n            value:\n              typeof s.value === 'boolean' ? boolToReactNode(s.value) : s.value,\n            onClick: () => {\n              if (s.entries) {\n                setCurrent(s.key)\n                return\n              }\n\n              if (typeof s.value === 'boolean') {\n                s.value = !s.value\n              } else {\n                if (parent) {\n                  parent.value = s.title\n                  if (parentKey) {\n                    setCurrent(parentKey)\n                  }\n                }\n              }\n\n              onChange(_settings)\n            }\n          }\n        }),\n        ...getMeta(parent, parentKey)\n      }\n\n      page.key = key\n      pages.push(page as Page)\n    }\n\n    fillPage(_settings, 'main')\n    return pages\n  }, [settings])\n\n  return (\n    <React.Fragment>\n      {pages.map((page) => (\n        <div\n          className={[\n            styles.panel,\n            current === page.key && styles.current\n          ].join(' ')}\n          key={page.key}\n        >\n          <React.Fragment>\n            {page.title && (\n              <div className={styles.header}>\n                <div onClick={page.onBackClick}>{page.title}</div>\n                {page.allowCustomValue && (\n                  <div onClick={page.onOtherValueSelected}>Other</div>\n                )}\n              </div>\n            )}\n\n            <div\n              aria-multiselectable={page.multiselectable}\n              className={styles.menu}\n            >\n              {page.items.map((item) => (\n                <div\n                  key={item.key}\n                  className={styles.item}\n                  onClick={item.onClick}\n                  aria-checked={item.checked}\n                >\n                  <div>{item.title}</div>\n                  <div>{item.value}</div>\n                </div>\n              ))}\n            </div>\n          </React.Fragment>\n        </div>\n      ))}\n    </React.Fragment>\n  )\n}\n\nconst SettingButton = ({ style, className, hd, settings, onChange }: Props) => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  return (\n    <PortalWithState defaultOpen closeOnOutsideClick closeOnEsc>\n      {({ openPortal, isOpen, portal }) => (\n        <React.Fragment>\n          <div\n            ref={ref}\n            className={[styles.button, className, hd && styles.hd].join(' ')}\n            aria-expanded={isOpen}\n            style={style}\n            onClick={openPortal}\n          >\n            <svg height='100%' version='1.1' viewBox='0 0 36 36' width='100%'>\n              <path d='m 23.94,18.78 c .03,-0.25 .05,-0.51 .05,-0.78 0,-0.27 -0.02,-0.52 -0.05,-0.78 l 1.68,-1.32 c .15,-0.12 .19,-0.33 .09,-0.51 l -1.6,-2.76 c -0.09,-0.17 -0.31,-0.24 -0.48,-0.17 l -1.99,.8 c -0.41,-0.32 -0.86,-0.58 -1.35,-0.78 l -0.30,-2.12 c -0.02,-0.19 -0.19,-0.33 -0.39,-0.33 l -3.2,0 c -0.2,0 -0.36,.14 -0.39,.33 l -0.30,2.12 c -0.48,.2 -0.93,.47 -1.35,.78 l -1.99,-0.8 c -0.18,-0.07 -0.39,0 -0.48,.17 l -1.6,2.76 c -0.10,.17 -0.05,.39 .09,.51 l 1.68,1.32 c -0.03,.25 -0.05,.52 -0.05,.78 0,.26 .02,.52 .05,.78 l -1.68,1.32 c -0.15,.12 -0.19,.33 -0.09,.51 l 1.6,2.76 c .09,.17 .31,.24 .48,.17 l 1.99,-0.8 c .41,.32 .86,.58 1.35,.78 l .30,2.12 c .02,.19 .19,.33 .39,.33 l 3.2,0 c .2,0 .36,-0.14 .39,-0.33 l .30,-2.12 c .48,-0.2 .93,-0.47 1.35,-0.78 l 1.99,.8 c .18,.07 .39,0 .48,-0.17 l 1.6,-2.76 c .09,-0.17 .05,-0.39 -0.09,-0.51 l -1.68,-1.32 0,0 z m -5.94,2.01 c -1.54,0 -2.8,-1.25 -2.8,-2.8 0,-1.54 1.25,-2.8 2.8,-2.8 1.54,0 2.8,1.25 2.8,2.8 0,1.54 -1.25,2.8 -2.8,2.8 l 0,0 z' />\n            </svg>\n          </div>\n\n          {portal(\n            <div className={styles.portal}>\n              <div className={styles.container}>\n                <Menu onChange={onChange} settings={settings} />\n              </div>\n            </div>\n          )}\n        </React.Fragment>\n      )}\n    </PortalWithState>\n  )\n}\n\nexport default SettingButton\n","import React, { useState } from 'react'\n\nimport Setting from '@iyaroslav/youtube-settings-button'\nimport '@iyaroslav/youtube-settings-button/dist/index.css'\n\nconst App = () => {\n  const [config, setConfig] = useState([{\n    key: 'autoplay',\n    title: 'Autoplay',\n    value: true\n  }, {\n    key: 'annotations',\n    title: 'Annotations',\n    value: true\n  }, {\n    key: 'speed',\n    title: 'Playback speed',\n    value: 'Normal',\n    entries: ['0.5', '0.75', 'Normal', '1.25', '1.5']\n  }, {\n    key: 'quality',\n    title: 'Quality',\n    value: 'UHD',\n    allowCustomValue: true,\n    onOtherValueSelected: () => prompt('Enter value'),\n    entries: ['SD', 'HD', 'UHD']\n  }])\n\n  return <div style={{\n    height: '150vh'\n  }}>\n    <p>Add <code>position: relative</code> style to body, for correct menu position\n    </p>\n    <Setting\n      style={{\n        position: 'absolute',\n        top: '25rem',\n        left: '50%',\n        marginLeft: '-1.6rem'\n      }}\n      hd\n      settings={config}\n      onChange={setConfig}\n    />\n  </div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}